#!/bin/sh

# REFERENCES
#
#   https://man7.org/linux/man-pages/man5/elf.5.html
#   https://refspecs.linuxfoundation.org/elf/elf.pdf
#   https://gist.github.com/x0nu11byt3/bcb35c3de461e5fb66173071a2379779

ELFCLASS32=1           ELFCLASS64=2
ELFDATA2LSB=1          ELFDATA2MSB=2

EI_MAGIC=0             EI_MAGIC_SIZE=4
EI_CLASS=4             EI_CLASS_SIZE=1
EI_DATA=5              EI_DATA_SIZE=1
EI_VERSION=6           EI_VERSION_SIZE=1
EI_OSABI=7             EI_OSABI_SIZE=1
EI_ABIVERSION=8        EI_ABIVERSION_SIZE=1
EI_PAD=9               EI_PAD_SIZE=7

ELF32_TYPE=16          ELF32_TYPE_SIZE=2
ELF32_MACHINE=18       ELF32_MACHINE_SIZE=2
ELF32_VERSION=20       ELF32_VERSION_SIZE=4
ELF32_ENTRY=24         ELF32_ENTRY_SIZE=4
ELF32_PHOFF=28         ELF32_PHOFF_SIZE=4
ELF32_SHOFF=32         ELF32_SHOFF_SIZE=4
ELF32_FLAGS=36         ELF32_FLAGS_SIZE=4
ELF32_EHSIZE=40        ELF32_EHSIZE_SIZE=2
ELF32_PHENTSIZ=42      ELF32_PHENTSIZ_SIZE=2
ELF32_PHNUM=44         ELF32_PHNUM_SIZE=2
ELF32_SHENTSIZ=46      ELF32_SHENTSIZ_SIZE=2
ELF32_SHNUM=48         ELF32_SHNUM_SIZE=2
ELF32_SHSTRNDX=50      ELF32_SHSTRNDX_SIZE=2

ELF64_TYPE=16          ELF64_TYPE_SIZE=2
ELF64_MACHINE=18       ELF64_MACHINE_SIZE=2
ELF64_VERSION=20       ELF64_VERSION_SIZE=4
ELF64_ENTRY=24         ELF64_ENTRY_SIZE=8
ELF64_PHOFF=32         ELF64_PHOFF_SIZE=8
ELF64_SHOFF=40         ELF64_SHOFF_SIZE=8
ELF64_FLAGS=48         ELF64_FLAGS_SIZE=4
ELF64_EHSIZE=52        ELF64_EHSIZE_SIZE=2
ELF64_PHENTSIZ=54      ELF64_PHENTSIZ_SIZE=2
ELF64_PHNUM=56         ELF64_PHNUM_SIZE=2
ELF64_SHENTSIZ=58      ELF64_SHENTSIZ_SIZE=2
ELF64_SHNUM=60         ELF64_SHNUM_SIZE=2
ELF64_SHSTRNDX=62      ELF64_SHSTRNDX_SIZE=2

ELF32_SH_NAME=0        ELF32_SH_NAME_SIZE=4
ELF32_SH_TYPE=4        ELF32_SH_TYPE_SIZE=4
ELF32_SH_FLAGS=8       ELF32_SH_FLAGS_SIZE=4
ELF32_SH_ADDR=12       ELF32_SH_ADDR_SIZE=4
ELF32_SH_OFFSET=16     ELF32_SH_OFFSET_SIZE=4
ELF32_SH_SIZE=20       ELF32_SH_SIZE_SIZE=4
ELF32_SH_LINK=24       ELF32_SH_LINK_SIZE=4
ELF32_SH_INFO=28       ELF32_SH_INFO_SIZE=4
ELF32_SH_ADDRALIGN=32  ELF32_SH_ADDRALIGN_SIZE=4
ELF32_SH_ENTSIZE=36    ELF32_SH_ENTSIZE_SIZE=4

ELF64_SH_NAME=0        ELF64_SH_NAME_SIZE=4
ELF64_SH_TYPE=4        ELF64_SH_TYPE_SIZE=4
ELF64_SH_FLAGS=8       ELF64_SH_FLAGS_SIZE=8
ELF64_SH_ADDR=16       ELF64_SH_ADDR_SIZE=8
ELF64_SH_OFFSET=24     ELF64_SH_OFFSET_SIZE=8
ELF64_SH_SIZE=32       ELF64_SH_SIZE_SIZE=8
ELF64_SH_LINK=40       ELF64_SH_LINK_SIZE=4
ELF64_SH_INFO=44       ELF64_SH_INFO_SIZE=4
ELF64_SH_ADDRALIGN=48  ELF64_SH_ADDRALIGN_SIZE=8
ELF64_SH_ENTSIZE=56    ELF64_SH_ENTSIZE_SIZE=8

set -e

usage()
{
	printf "usage: sieve-elf OPTIONS\n"
	printf "\n"
	printf "OPTIONS\n"
	printf "\n"
	printf "  -i                 Interpret member values\n"
	printf "  -s TYPE [INDEX]    Structure type\n"
	printf "  -f FILE            Object file\n"
	printf "\n"
	printf "STRUCTURE TYPES\n"
	printf "\n"
	printf "  ehdr               ELF Header (default)\n"
	printf "  shdr [INDEX]       ELF Section Header\n"
	printf "\n"
}

main()
{
	local operation=display
	local structure=ehdr
	local index=0

	while [ $# -gt 0 ]
	do
		local option=$1
		shift 1

		case "${option}" in
		("-i")
			operation=interpret
			;;

		("-s")
			if [ $# -eq 0 ]
			then
				usage
				exit 1
			fi

			structure=$1
			shift 1

			case "${structure}" in
			("ehdr")
				;;

			("shdr")
				if [ $# -eq 0 ]
				then
					usage
					exit 1
				fi

				index=$1
				shift 1
				;;

			(*)
				usage
				exit 1
				;;

			esac
			;;

		("-f")
			if [ $# -eq 0 ]
			then
				usage
				exit 1
			fi

			OBJECT=$1
			shift 1
			;;

		(*)
			usage
			exit 1
			;;
		esac
	done

	if [ -z "${OBJECT}" ]
	then
		usage
		exit 1
	fi

	detect_target

	${structure}_${operation} ${index}
}

detect_target()
{
	case "$(slice ${EI_CLASS} ${EI_CLASS_SIZE} uint8)" in
	(${ELFCLASS32})
		case "$(slice ${EI_DATA} ${EI_DATA_SIZE} uint8)" in
		(${ELFDATA2LSB})
			UINT16=uint16le UINT32=uint32le UINT=uint32le
			;;
		(${ELFDATA2MSB})
			UINT16=uint16be UINT32=uint32be UINT=uint32be
			;;
		esac

		ELF_TYPE=${ELF32_TYPE}
		ELF_TYPE_SIZE=${ELF32_TYPE_SIZE}
		ELF_MACHINE=${ELF32_MACHINE}
		ELF_MACHINE_SIZE=${ELF32_MACHINE_SIZE}
		ELF_VERSION=${ELF32_VERSION}
		ELF_VERSION_SIZE=${ELF32_VERSION_SIZE}
		ELF_ENTRY=${ELF32_ENTRY}
		ELF_ENTRY_SIZE=${ELF32_ENTRY_SIZE}
		ELF_PHOFF=${ELF32_PHOFF}
		ELF_PHOFF_SIZE=${ELF32_PHOFF_SIZE}
		ELF_SHOFF=${ELF32_SHOFF}
		ELF_SHOFF_SIZE=${ELF32_SHOFF_SIZE}
		ELF_FLAGS=${ELF32_FLAGS}
		ELF_FLAGS_SIZE=${ELF32_FLAGS_SIZE}
		ELF_EHSIZE=${ELF32_EHSIZE}
		ELF_EHSIZE_SIZE=${ELF32_EHSIZE_SIZE}
		ELF_PHENTSIZ=${ELF32_PHENTSIZ}
		ELF_PHENTSIZ_SIZE=${ELF32_PHENTSIZ_SIZE}
		ELF_PHNUM=${ELF32_PHNUM}
		ELF_PHNUM_SIZE=${ELF32_PHNUM_SIZE}
		ELF_SHENTSIZ=${ELF32_SHENTSIZ}
		ELF_SHENTSIZ_SIZE=${ELF32_SHENTSIZ_SIZE}
		ELF_SHNUM=${ELF32_SHNUM}
		ELF_SHNUM_SIZE=${ELF32_SHNUM_SIZE}
		ELF_SHSTRNDX=${ELF32_SHSTRNDX}
		ELF_SHSTRNDX_SIZE=${ELF32_SHSTRNDX_SIZE}

		ELF_SH_NAME=${ELF32_SH_NAME}
		ELF_SH_NAME_SIZE=${ELF32_SH_NAME_SIZE}
		ELF_SH_TYPE=${ELF32_SH_TYPE}
		ELF_SH_TYPE_SIZE=${ELF32_SH_TYPE_SIZE}
		ELF_SH_FLAGS=${ELF32_SH_FLAGS}
		ELF_SH_FLAGS_SIZE=${ELF32_SH_FLAGS_SIZE}
		ELF_SH_ADDR=${ELF32_SH_ADDR}
		ELF_SH_ADDR_SIZE=${ELF32_SH_ADDR_SIZE}
		ELF_SH_OFFSET=${ELF32_SH_OFFSET}
		ELF_SH_OFFSET_SIZE=${ELF32_SH_OFFSET_SIZE}
		ELF_SH_SIZE=${ELF32_SH_SIZE}
		ELF_SH_SIZE_SIZE=${ELF32_SH_SIZE_SIZE}
		ELF_SH_LINK=${ELF32_SH_LINK}
		ELF_SH_LINK_SIZE=${ELF32_SH_LINK_SIZE}
		ELF_SH_INFO=${ELF32_SH_INFO}
		ELF_SH_INFO_SIZE=${ELF32_SH_INFO_SIZE}
		ELF_SH_ADDRALIGN=${ELF32_SH_ADDRALIGN}
		ELF_SH_ADDRALIGN_SIZE=${ELF32_SH_ADDRALIGN_SIZE}
		ELF_SH_ENTSIZE=${ELF32_SH_ENTSIZE}
		ELF_SH_ENTSIZE_SIZE=${ELF32_SH_ENTSIZE_SIZE}
		;;

	(${ELFCLASS64})
		case "$(slice ${EI_DATA} ${EI_DATA_SIZE} uint8)" in
		(${ELFDATA2LSB})
			UINT16=uint16le UINT32=uint32le UINT=uint64le
			;;
		(${ELFDATA2MSB})
			UINT16=uint16be UINT32=uint32be UINT=uint64be
			;;
		esac

		ELF_TYPE=${ELF64_TYPE}
		ELF_TYPE_SIZE=${ELF64_TYPE_SIZE}
		ELF_MACHINE=${ELF64_MACHINE}
		ELF_MACHINE_SIZE=${ELF64_MACHINE_SIZE}
		ELF_VERSION=${ELF64_VERSION}
		ELF_VERSION_SIZE=${ELF64_VERSION_SIZE}
		ELF_ENTRY=${ELF64_ENTRY}
		ELF_ENTRY_SIZE=${ELF64_ENTRY_SIZE}
		ELF_PHOFF=${ELF64_PHOFF}
		ELF_PHOFF_SIZE=${ELF64_PHOFF_SIZE}
		ELF_SHOFF=${ELF64_SHOFF}
		ELF_SHOFF_SIZE=${ELF64_SHOFF_SIZE}
		ELF_FLAGS=${ELF64_FLAGS}
		ELF_FLAGS_SIZE=${ELF64_FLAGS_SIZE}
		ELF_EHSIZE=${ELF64_EHSIZE}
		ELF_EHSIZE_SIZE=${ELF64_EHSIZE_SIZE}
		ELF_PHENTSIZ=${ELF64_PHENTSIZ}
		ELF_PHENTSIZ_SIZE=${ELF64_PHENTSIZ_SIZE}
		ELF_PHNUM=${ELF64_PHNUM}
		ELF_PHNUM_SIZE=${ELF64_PHNUM_SIZE}
		ELF_SHENTSIZ=${ELF64_SHENTSIZ}
		ELF_SHENTSIZ_SIZE=${ELF64_SHENTSIZ_SIZE}
		ELF_SHNUM=${ELF64_SHNUM}
		ELF_SHNUM_SIZE=${ELF64_SHNUM_SIZE}
		ELF_SHSTRNDX=${ELF64_SHSTRNDX}
		ELF_SHSTRNDX_SIZE=${ELF64_SHSTRNDX_SIZE}

		ELF_SH_NAME=${ELF64_SH_NAME}
		ELF_SH_NAME_SIZE=${ELF64_SH_NAME_SIZE}
		ELF_SH_TYPE=${ELF64_SH_TYPE}
		ELF_SH_TYPE_SIZE=${ELF64_SH_TYPE_SIZE}
		ELF_SH_FLAGS=${ELF64_SH_FLAGS}
		ELF_SH_FLAGS_SIZE=${ELF64_SH_FLAGS_SIZE}
		ELF_SH_ADDR=${ELF64_SH_ADDR}
		ELF_SH_ADDR_SIZE=${ELF64_SH_ADDR_SIZE}
		ELF_SH_OFFSET=${ELF64_SH_OFFSET}
		ELF_SH_OFFSET_SIZE=${ELF64_SH_OFFSET_SIZE}
		ELF_SH_SIZE=${ELF64_SH_SIZE}
		ELF_SH_SIZE_SIZE=${ELF64_SH_SIZE_SIZE}
		ELF_SH_LINK=${ELF64_SH_LINK}
		ELF_SH_LINK_SIZE=${ELF64_SH_LINK_SIZE}
		ELF_SH_INFO=${ELF64_SH_INFO}
		ELF_SH_INFO_SIZE=${ELF64_SH_INFO_SIZE}
		ELF_SH_ADDRALIGN=${ELF64_SH_ADDRALIGN}
		ELF_SH_ADDRALIGN_SIZE=${ELF64_SH_ADDRALIGN_SIZE}
		ELF_SH_ENTSIZE=${ELF64_SH_ENTSIZE}
		ELF_SH_ENTSIZE_SIZE=${ELF64_SH_ENTSIZE_SIZE}
		;;
	esac
}

slice()
{
	local offset=$1 size=$2 type=$3 format=${4:-%d}

	dump -o ${offset} -s ${size} "${OBJECT}" | \
	sift -f "${format}" -t ${type}
}

member()
{
	local offset=$1 size=$2 label=$3 value=$4 palette=

	if [ -z "${value}" ]
	then
		printf "${label}\n"
	else
		printf "${label}: %s\n" "${value}"
	fi

	if [ -n "${PALETTE}" ]
	then
		palette="-p ${PALETTE}"
	fi

	dump -o ${offset} -s ${size} -t f ${palette} "${OBJECT}"
}


# -- ELF Header --------------------------------------------------------------

ehdr_ident()
{
	member ${EI_MAGIC}      ${EI_MAGIC_SIZE}      "ei_magic"
	member ${EI_CLASS}      ${EI_CLASS_SIZE}      "ei_class"
	member ${EI_DATA}       ${EI_DATA_SIZE}       "ei_data"
	member ${EI_VERSION}    ${EI_VERSION_SIZE}    "ei_version"
	member ${EI_OSABI}      ${EI_OSABI_SIZE}      "ei_osabi"
	member ${EI_ABIVERSION} ${EI_ABIVERSION_SIZE} "ei_abiversion"
	member ${EI_PAD}        ${EI_PAD_SIZE}        "ei_pad"
}

ehdr_display()
{
	ehdr_ident

	member ${ELF_TYPE}     ${ELF_TYPE_SIZE}     "e_type"
	member ${ELF_MACHINE}  ${ELF_MACHINE_SIZE}  "e_machine"
	member ${ELF_VERSION}  ${ELF_VERSION_SIZE}  "e_version"
	member ${ELF_ENTRY}    ${ELF_ENTRY_SIZE}    "e_entry"
	member ${ELF_PHOFF}    ${ELF_PHOFF_SIZE}    "e_phoff"
	member ${ELF_SHOFF}    ${ELF_SHOFF_SIZE}    "e_shoff"
	member ${ELF_FLAGS}    ${ELF_FLAGS_SIZE}    "e_flags"
	member ${ELF_EHSIZE}   ${ELF_EHSIZE_SIZE}   "e_ehsize"
	member ${ELF_PHENTSIZ} ${ELF_PHENTSIZ_SIZE} "e_phentsiz"
	member ${ELF_PHNUM}    ${ELF_PHNUM_SIZE}    "e_phnum"
	member ${ELF_SHENTSIZ} ${ELF_SHENTSIZ_SIZE} "e_shentsiz"
	member ${ELF_SHNUM}    ${ELF_SHNUM_SIZE}    "e_shnum"
	member ${ELF_SHSTRNDX} ${ELF_SHSTRNDX_SIZE} "e_shstrndx"
}

ehdr_interpret()
{
	member ${EI_MAGIC} \
	       ${EI_MAGIC_SIZE} \
	       "Magic"

	member ${EI_CLASS} \
	       ${EI_CLASS_SIZE} \
	       "Class" \
	       "$(ehdr_class ${EI_CLASS} ${EI_CLASS_SIZE})"

	member ${EI_DATA} \
	       ${EI_DATA_SIZE} \
	       "Data" \
	       "$(ehdr_data ${EI_DATA} ${EI_DATA_SIZE})"

	member ${EI_VERSION} \
	       ${EI_VERSION_SIZE} \
	       "Version"

	member ${EI_OSABI} \
	       ${EI_OSABI_SIZE} \
	       "OS / ABI" \
	       "$(ehdr_osabi ${EI_OSABI} ${EI_OSABI_SIZE})"

	member ${EI_ABIVERSION} \
	       ${EI_ABIVERSION_SIZE} \
	       "ABI Version"

	member ${EI_PAD} \
	       ${EI_PAD_SIZE} \
	       "Padding"

	member ${ELF_TYPE} \
	       ${ELF_TYPE_SIZE} \
	       "Object Type" \
	       "$(ehdr_object ${ELF_TYPE} ${ELF_TYPE_SIZE})"

	member ${ELF_MACHINE} \
	       ${ELF_MACHINE_SIZE} \
	       "Architecture" \
	       "$(ehdr_machine ${ELF_MACHINE} ${ELF_MACHINE_SIZE})"

	member ${ELF_VERSION} \
	       ${ELF_VERSION_SIZE} \
	       "File Version"

	member ${ELF_ENTRY} \
	       ${ELF_ENTRY_SIZE} \
	       "Entry Point" \
	       $(slice ${ELF_ENTRY} ${ELF_ENTRY_SIZE} ${UINT} 0x%x)

	member ${ELF_PHOFF} \
	       ${ELF_PHOFF_SIZE} \
	       "Program Header Table Offset" \
	       $(slice ${ELF_PHOFF} ${ELF_PHOFF_SIZE} ${UINT} 0x%x)

	member ${ELF_SHOFF} \
	       ${ELF_SHOFF_SIZE} \
	       "Section Header Table Offset" \
	       $(slice ${ELF_SHOFF} ${ELF_SHOFF_SIZE} ${UINT} 0x%x)

	member ${ELF_FLAGS} \
	       ${ELF_FLAGS_SIZE} \
	       "Processor-Specific Flags"

	member ${ELF_EHSIZE} \
	       ${ELF_EHSIZE_SIZE} \
	       "ELF Header Size" \
	       $(slice ${ELF_EHSIZE} ${ELF_EHSIZE_SIZE} ${UINT16})

	member ${ELF_PHENTSIZ} \
	       ${ELF_PHENTSIZ_SIZE} \
	       "Program Header Size" \
	       $(slice ${ELF_PHENTSIZ} ${ELF_PHENTSIZ_SIZE} ${UINT16})

	member ${ELF_PHNUM} \
	       ${ELF_PHNUM_SIZE} \
	       "Program Header Count" \
	       $(slice ${ELF_PHNUM} ${ELF_PHNUM_SIZE} ${UINT16})

	member ${ELF_SHENTSIZ} \
	       ${ELF_SHENTSIZ_SIZE} \
	       "Section Header Size" \
	       $(slice ${ELF_SHENTSIZ} ${ELF_SHENTSIZ_SIZE} ${UINT16})

	member ${ELF_SHNUM} \
	       ${ELF_SHNUM_SIZE} \
	       "Section Header Count" \
	       $(slice ${ELF_SHNUM} ${ELF_SHNUM_SIZE} ${UINT16})

	member ${ELF_SHSTRNDX} \
	       ${ELF_SHSTRNDX_SIZE} \
	       "Section Name String Table Index" \
	       $(slice ${ELF_SHSTRNDX} ${ELF_SHSTRNDX_SIZE} ${UINT16})
}

ehdr_class()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} uint8)

	case "${value}" in
	(1) printf "32-bit" ;;
	(2) printf "64-bit" ;;
	(*) printf "Unknown" ;;
	esac
}

ehdr_data()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} uint8)

	case "${value}" in
	(1) printf "Little Endian" ;;
	(2) printf "Big Endian" ;;
	(*) printf "Unknown" ;;
	esac
}

ehdr_osabi()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} uint8)

	case "${value}" in
	  (0) printf "UNIX System V" ;;
	  (1) printf "HP-UX" ;;
	  (2) printf "NetBSD" ;;
	  (3) printf "Linux" ;;
	  (6) printf "Solaris" ;;
	  (7) printf "AIX" ;;
	  (8) printf "IRIX" ;;
	  (9) printf "FreeBSD" ;;
	 (10) printf "TRU64 UNIX" ;;
	 (11) printf "Modesto" ;;
	 (12) printf "OpenBSD" ;;
	 (13) printf "ARM EABI" ;;
	 (14) printf "ARM" ;;
	(255) printf "Standalone / Embedded" ;;
	  (*) printf "Unknown" ;;
	esac
}

ehdr_object()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} ${UINT16})

	case "${value}" in
	(1) printf "Relocatable" ;;
	(2) printf "Executable" ;;
	(3) printf "Shared Object" ;;
	(4) printf "Core" ;;
	(*) printf "Unknown" ;;
	esac
}

ehdr_machine()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} ${UINT16})

	case "${value}" in
	  (1) printf "AT&T WE 32100" ;;
	  (2) printf "Sun SPARC" ;;
	  (3) printf "Intel 80386" ;;
	  (4) printf "Motorola m68k" ;;
	  (5) printf "Motorola m88k" ;;
	  (6) printf "Intel MCU" ;;
	  (7) printf "Intel 80860" ;;
	  (8) printf "MIPS R3000" ;;
	  (9) printf "IBM System/370" ;;
	 (10) printf "MIPS R3000" ;;
	 (15) printf "HP PA-RISC" ;;
	 (17) printf "Fujitsu VPP500" ;;
	 (18) printf "Sun SPARC v8+ 32-bit" ;;
	 (19) printf "Intel 80960" ;;
	 (20) printf "PowerPC 32-bit" ;;
	 (21) printf "PowerPC 64-bit" ;;
	 (22) printf "IBM System/390" ;;
	 (23) printf "IBM SPU/SPC" ;;
	 (36) printf "NEC V800" ;;
	 (37) printf "Fujitsu FR20" ;;
	 (38) printf "TRW RH-32" ;;
	 (39) printf "Motorola RCE" ;;
	 (40) printf "ARM" ;;
	 (41) printf "Digital Alpha" ;;
	 (42) printf "Hitachi SH" ;;
	 (43) printf "Sun SPARC v9 64-bit" ;;
	 (44) printf "Siemens Tricore" ;;
	 (45) printf "Argonaut RISC Core" ;;
	 (46) printf "Hitachi H8/300" ;;
	 (47) printf "Hitachi H8/300H" ;;
	 (48) printf "Hitachi H8S" ;;
	 (49) printf "Hitachi H8/500" ;;
	 (50) printf "Intel Itanium" ;;
	 (51) printf "Stanford MIPS-X" ;;
	 (52) printf "Motorola Coldfire" ;;
	 (53) printf "Motorola M68HC12" ;;
	 (54) printf "Fujitsu Multimedia Accelerator" ;;
	 (55) printf "Siemens PCP" ;;
	 (56) printf "Sony nCPU embedded RISC" ;;
	 (57) printf "Denso NDR1" ;;
	 (58) printf "Motorola Start*Core" ;;
	 (59) printf "Toyota ME16" ;;
	 (60) printf "STMicroelectronic ST100" ;;
	 (61) printf "Advanced Logic Corp. TinyJ" ;;
	 (62) printf "AMD x86-64" ;;
	 (63) printf "Sony DSP" ;;
	 (64) printf "Digital PDP-10" ;;
	 (65) printf "Digital PDP-11" ;;
	 (66) printf "Siemens FX66" ;;
	 (67) printf "STMicroelectronics ST9+" ;;
	 (68) printf "STMicroelectronics ST7" ;;
	 (69) printf "Motorola MC68HC16" ;;
	 (70) printf "Motorola MC68HC11" ;;
	 (71) printf "Motorola MC68HC08" ;;
	 (72) printf "Motorola MC68HC05" ;;
	 (73) printf "Silicon Graphics SVx" ;;
	 (74) printf "STMicroelectronics ST19" ;;
	 (75) printf "Digital VAX" ;;
	 (76) printf "Axis Communications 32-bit" ;;
	 (77) printf "Infineon Technologies 32-bit" ;;
	 (78) printf "Element14 64-bit DSP" ;;
	 (79) printf "LSI Logic 16-bit DSP" ;;
	 (80) printf "Donald Knuth's MMIX" ;;
	 (81) printf "Harvard University ANY" ;;
	 (82) printf "SiTera Prism" ;;
	 (83) printf "Atmel AVR" ;;
	 (84) printf "Fujitsu FR30" ;;
	 (85) printf "Mitsubishi D10V" ;;
	 (86) printf "Mitsubishi D30V" ;;
	 (87) printf "NEC v850" ;;
	 (88) printf "Mitsubishi M32R" ;;
	 (89) printf "Matsushita MN10300" ;;
	 (90) printf "Matsushita MN10200" ;;
	 (91) printf "picoJava" ;;
	 (92) printf "OpenRISC" ;;
	 (93) printf "ARCompact" ;;
	 (94) printf "Tensilica Xtensa" ;;
	 (95) printf "Alphamosaic VideoCore" ;;
	 (96) printf "Thompson Multimedia" ;;
	 (97) printf "NS32000" ;;
	 (98) printf "Tenor Network TPC" ;;
	 (99) printf "Trebia SNP 1000" ;;
	(100) printf "ST200" ;;
	(101) printf "Ubicom IP2xxx" ;;
	(102) printf "MAX" ;;
	(103) printf "CompactRISC" ;;
	(104) printf "Fujitsu F2MC16" ;;
	(105) printf "Texas Instruments MSP430" ;;
	(106) printf "Analog Devices Blackfin DSP" ;;
	(107) printf "Seiko Epson S1C33 family" ;;
	(108) printf "Sharp" ;;
	(109) printf "Arca RISC" ;;
	(110) printf "PKU-Unity" ;;
	(111) printf "eXcess" ;;
	(112) printf "Icera" ;;
	(113) printf "Altera Nios II" ;;
	(114) printf "CompactRISC CRX" ;;
	(115) printf "Motorola XGATE" ;;
	(116) printf "Infineon C16x/XC16x" ;;
	(117) printf "Renesas M16C" ;;
	(118) printf "dsPIC30F" ;;
	(119) printf "Freescale Communication Engine RISC" ;;
	(120) printf "Renesas M32C" ;;
	(131) printf "Altium TSK3000" ;;
	(132) printf "Freescale RS08" ;;
	(133) printf "Analog Devices SHARC" ;;
	(134) printf "Cyan Technology eCOG2" ;;
	(135) printf "Sunplus S+core7 RISC" ;;
	(136) printf "New Japan Radio 24-bit DSP" ;;
	(137) printf "Broadcom VideoCore III" ;;
	(138) printf "RISC for Lattice FPGA" ;;
	(139) printf "Seiko Epson C17" ;;
	(140) printf "TI TMS320C6000 DSP" ;;
	(141) printf "TI TMS320C2000 DSP" ;;
	(142) printf "TI TMS320C55x DSP" ;;
	(143) printf "TI Application Specific RISC" ;;
	(144) printf "TI Programmable Realtime Unit" ;;
	(160) printf "STMicroelectronics 64bit VLIW DSP" ;;
	(161) printf "Cypress M8C" ;;
	(162) printf "Renesas R32C" ;;
	(163) printf "NXP TriMedia" ;;
	(164) printf "QUALCOMM DSP6" ;;
	(165) printf "Intel 8051" ;;
	(166) printf "STMicroelectronics STxP7x" ;;
	(167) printf "Andes Tech RISC" ;;
	(168) printf "Cyan Technology eCOG1X" ;;
	(169) printf "Dallas MAXQ30" ;;
	(170) printf "New Japan Radio (NJR) 16-bit DSP" ;;
	(171) printf "M2000 Reconfigurable RISC" ;;
	(172) printf "Cray NV2 vector architecture" ;;
	(173) printf "Renesas RX" ;;
	(174) printf "Imagination Tech. META" ;;
	(175) printf "MCST Elbrus" ;;
	(176) printf "Cyan Technology eCOG16" ;;
	(177) printf "National Semi. CompactRISC CR16" ;;
	(178) printf "Freescale Extended Time Processing Unit" ;;
	(179) printf "Infineon Tech. SLE9X" ;;
	(180) printf "Intel L10M" ;;
	(181) printf "Intel K10M" ;;
	(183) printf "ARM 64-bit" ;;
	(185) printf "Atmel 32-bit" ;;
	(186) printf "STMicroelectronics STM8" ;;
	(187) printf "Tilera TILE64" ;;
	(188) printf "Tilera TILEPro" ;;
	(189) printf "Xilinx MicroBlaze" ;;
	(190) printf "NVIDIA CUDA" ;;
	(191) printf "Tilera TILE-Gx" ;;
	(192) printf "CloudShield" ;;
	(193) printf "KIPO-KAIST Core-A 1st gen." ;;
	(194) printf "KIPO-KAIST Core-A 2nd gen." ;;
	(195) printf "Synopsys ARCompact V2" ;;
	(196) printf "Open8 RISC" ;;
	(197) printf "Renesas RL78" ;;
	(198) printf "Broadcom VideoCore V" ;;
	(199) printf "Renesas 78KOR" ;;
	(200) printf "Freescale 56800EX DSC" ;;
	(201) printf "Beyond BA1" ;;
	(202) printf "Beyond BA2" ;;
	(203) printf "XMOS xCORE" ;;
	(204) printf "Microchip 8-bit PIC" ;;
	(210) printf "KM211 KM32" ;;
	(211) printf "KM211 KMX32" ;;
	(212) printf "KM211 KMX16" ;;
	(213) printf "KM211 KMX8" ;;
	(214) printf "KM211 KVARC" ;;
	(215) printf "Paneve CDP" ;;
	(216) printf "Cognitive Smart Memory Processor" ;;
	(217) printf "Bluechip CoolEngine" ;;
	(218) printf "Nanoradio Optimized RISC" ;;
	(219) printf "CSR Kalimba" ;;
	(220) printf "Zilog Z80" ;;
	(221) printf "VISIUMcore" ;;
	(222) printf "FT32" ;;
	(223) printf "Moxie" ;;
	(224) printf "AMD GPU" ;;
	(243) printf "RISC-V" ;;
	(247) printf "Linux BPF" ;;
	(252) printf "C-SKY" ;;
	  (*) printf "Unknown" ;;
	esac
}


# -- ELF Section Header ------------------------------------------------------

shdr_display()
{
	local index=$1

	local shoff=$(slice ${ELF_SHOFF} ${ELF_SHOFF_SIZE} ${UINT})
	local shentsiz=$(slice ${ELF_SHENTSIZ} ${ELF_SHENTSIZ_SIZE} ${UINT16})
	local shnum=$(slice ${ELF_SHNUM} ${ELF_SHNUM_SIZE} ${UINT16})

	if [ ${index} -lt 0 ] || [ ${index} -ge ${shnum} ]
	then
		printf "invalid section header index\n"
		exit 1
	fi

	local offset=$((${shoff} + ${index} * ${shentsiz}))

	member $((${offset} + ${ELF_SH_NAME})) \
	       ${ELF_SH_NAME_SIZE} \
	       "sh_name"

	member $((${offset} + ${ELF_SH_TYPE})) \
	       ${ELF_SH_TYPE_SIZE} \
	       "sh_type"

	member $((${offset} + ${ELF_SH_FLAGS})) \
	       ${ELF_SH_FLAGS_SIZE} \
	       "sh_flags"

	member $((${offset} + ${ELF_SH_ADDR})) \
	       ${ELF_SH_ADDR_SIZE} \
	       "sh_addr"

	member $((${offset} + ${ELF_SH_OFFSET})) \
	       ${ELF_SH_OFFSET_SIZE} \
	       "sh_offset"

	member $((${offset} + ${ELF_SH_SIZE})) \
	       ${ELF_SH_SIZE_SIZE} \
	       "sh_size"

	member $((${offset} + ${ELF_SH_LINK})) \
	       ${ELF_SH_LINK_SIZE} \
	       "sh_link"

	member $((${offset} + ${ELF_SH_INFO})) \
	       ${ELF_SH_INFO_SIZE} \
	       "sh_info"

	member $((${offset} + ${ELF_SH_ADDRALIGN})) \
	       ${ELF_SH_ADDRALIGN_SIZE} \
	       "sh_addralign"

	member $((${offset} + ${ELF_SH_ENTSIZE})) \
	       ${ELF_SH_ENTSIZE_SIZE} \
	       "sh_entsize"
}

shdr_interpret()
{
	local index=$1

	local shoff=$(slice ${ELF_SHOFF} ${ELF_SHOFF_SIZE} ${UINT})
	local shentsiz=$(slice ${ELF_SHENTSIZ} ${ELF_SHENTSIZ_SIZE} ${UINT16})
	local shnum=$(slice ${ELF_SHNUM} ${ELF_SHNUM_SIZE} ${UINT16})

	if [ ${index} -lt 0 ] || [ ${index} -ge ${shnum} ]
	then
		printf "invalid section header index\n"
		exit 1
	fi

	local offset=$((${shoff} + ${index} * ${shentsiz}))

	member $((${offset} + ${ELF_SH_NAME})) \
	       ${ELF_SH_NAME_SIZE} \
	       "Name" \
	       $(shdr_name ${offset})

	member $((${offset} + ${ELF_SH_TYPE})) \
	       ${ELF_SH_TYPE_SIZE} \
	       "Type"

	member $((${offset} + ${ELF_SH_FLAGS})) \
	       ${ELF_SH_FLAGS_SIZE} \
	       "Flags"

	member $((${offset} + ${ELF_SH_ADDR})) \
	       ${ELF_SH_ADDR_SIZE} \
	       "Memory Address" \
	       $(slice $((${offset} + ${ELF_SH_ADDR})) \
	               ${ELF_SH_ADDR_SIZE} \
	               ${UINT} 0x%x)

	member $((${offset} + ${ELF_SH_OFFSET})) \
	       ${ELF_SH_OFFSET_SIZE} \
	       "File Offset" \
	       $(slice $((${offset} + ${ELF_SH_OFFSET})) \
	               ${ELF_SH_OFFSET_SIZE} \
	               ${UINT} 0x%x)

	member $((${offset} + ${ELF_SH_SIZE})) \
	       ${ELF_SH_SIZE_SIZE} \
	       "Size" \
	       $(slice $((${offset} + ${ELF_SH_SIZE})) \
	               ${ELF_SH_SIZE_SIZE} \
	               ${UINT})

	member $((${offset} + ${ELF_SH_LINK})) \
	       ${ELF_SH_LINK_SIZE} \
	       "Link"

	member $((${offset} + ${ELF_SH_INFO})) \
	       ${ELF_SH_INFO_SIZE} \
	       "Info"

	member $((${offset} + ${ELF_SH_ADDRALIGN})) \
	       ${ELF_SH_ADDRALIGN_SIZE} \
	       "Alignment" \
	       $(slice $((${offset} + ${ELF_SH_ADDRALIGN})) \
	               ${ELF_SH_ADDRALIGN_SIZE} \
	               ${UINT})

	member $((${offset} + ${ELF_SH_ENTSIZE})) \
	       ${ELF_SH_ENTSIZE_SIZE} \
	       "Entry Size" \
	       $(slice $((${offset} + ${ELF_SH_ENTSIZE})) \
	               ${ELF_SH_ENTSIZE_SIZE} \
	               ${UINT})
}

shdr_name()
{
	local shnum=$(slice ${ELF_SHNUM} ${ELF_SHNUM_SIZE} ${UINT16})

	if [ ${shnum} -eq 0 ]
	then
		return
	fi

	local shdr_offset=$1
	local name_offset=$(slice ${shdr_offset} ${ELF_SH_NAME_SIZE} ${UINT32})

	local shoff=$(slice ${ELF_SHOFF} ${ELF_SHOFF_SIZE} ${UINT32})
	local shentsiz=$(slice ${ELF_SHENTSIZ} ${ELF_SHENTSIZ_SIZE} ${UINT16})
	local shstrndx=$(slice ${ELF_SHSTRNDX} ${ELF_SHSTRNDX_SIZE} ${UINT16})

	local shstrtab=$((${shoff} + ${shstrndx} * ${shentsiz}))
	local shstrtab_data=$(slice $((${shstrtab} + ${ELF_SH_OFFSET})) \
	                            ${ELF_SH_OFFSET_SIZE} \
	                            ${UINT})
	local shstrtab_size=$(slice $((${shstrtab} + ${ELF_SH_SIZE})) \
	                            ${ELF_SH_SIZE_SIZE} \
	                            ${UINT})

	local offset=$((${shstrtab_data} + ${name_offset}))
	local size=$((${shstrtab_size} - ${offset}))

	dump -o ${offset} -s ${size} "${OBJECT}" | sift -t string
}


# ----------------------------------------------------------------------------

main "$@"
