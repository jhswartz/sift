#!/bin/sh

# REFERENCES
#
#   https://man7.org/linux/man-pages/man5/elf.5.html
#   https://refspecs.linuxfoundation.org/elf/elf.pdf
#   https://gist.github.com/x0nu11byt3/bcb35c3de461e5fb66173071a2379779

EI_CLASS=4
EI_CLASS_SIZE=1

ELFCLASS32=1
ELFCLASS64=2

EI_DATA=5
EI_DATA_SIZE=1

ELFDATA2LSB=1
ELFDATA2MSB=2

set -e

usage()
{
	printf "usage: sieve-elf-ehdr [ -i ] OBJECT\n"
}

main()
{
	local operation=

	case "$#" in
	(2)
		case "$1" in
		("-i")
			OBJECT=$2
			operation=interpret
			;;

		(*)
			usage
			exit 1
			;;
		esac
		;;

	(1)
		OBJECT=$1
		operation=display
		;;
		
	(*)
		usage
		exit 1
		;;
	esac

	case "$(slice ${EI_CLASS} ${EI_CLASS_SIZE} uint8)" in
	(${ELFCLASS32})
		case "$(slice ${EI_DATA} ${EI_DATA_SIZE} uint8)" in
		(${ELFDATA2LSB}) UINT16=int16le UINT=int32le ;;
		(${ELFDATA2MSB}) UINT16=int16be UINT=int32be ;;
		esac

		PREFIX=elf32
		;;

	(${ELFCLASS64})
		case "$(slice ${EI_DATA} ${EI_DATA_SIZE} uint8)" in
		(${ELFDATA2LSB}) UINT16=int16le UINT=int64le ;;
		(${ELFDATA2MSB}) UINT16=int16be UINT=int64be ;;
		esac

		PREFIX=elf64
		;;
	esac

	${PREFIX}_${operation}
}

elf32_display()
{
	member 0  4 "ei_magic"
	member 4  1 "ei_class"
	member 5  1 "ei_data"
	member 6  1 "ei_version"
	member 7  1 "ei_osabi"
	member 8  1 "ei_abiversion"
	member 9  7 "ei_pad"
	member 16 2 "e_type"
	member 18 2 "e_machine"
	member 20 4 "e_version"
	member 24 4 "e_entry"
	member 28 4 "e_phoff"
	member 32 4 "e_shoff"
	member 36 4 "e_flags"
	member 40 2 "e_ehsize"
	member 42 2 "e_phentsiz"
	member 44 2 "e_phnum"
	member 46 2 "e_shentsiz"
	member 48 2 "e_shnum"
	member 58 2 "e_shstrndx"
}

elf64_display()
{
	member 0  4 "ei_magic"
	member 4  1 "ei_class"
	member 5  1 "ei_data"
	member 6  1 "ei_version"
	member 7  1 "ei_osabi"
	member 8  1 "ei_abiversion"
	member 9  7 "ei_pad"
	member 16 2 "e_type"
	member 18 2 "e_machine"
	member 20 4 "e_version"
	member 24 8 "e_entry"
	member 32 8 "e_phoff"
	member 40 8 "e_shoff"
	member 48 4 "e_flags"
	member 52 2 "e_ehsize"
	member 54 2 "e_phentsiz"
	member 56 2 "e_phnum"
	member 58 2 "e_shentsiz"
	member 60 2 "e_shnum"
	member 62 2 "e_shstrndx"
}

elf32_interpret()
{
	member 0  4 "Magic"
	member 4  1 "Class" "$(class 4 1)"
	member 5  1 "Data" "$(data 5 1)"
	member 6  1 "Version"
	member 7  1 "OS / ABI" "$(osabi 7 1)"
	member 8  1 "ABI Version"
	member 9  7 "Padding"
	member 16 2 "Object Type" "$(object 16 2)"
	member 18 2 "Architecture" "$(machine 18 2)"
	member 20 4 "File Version"
	member 24 4 "Entry Point" $(slice 24 4 ${UINT} 0x%x)
	member 28 4 "Program Header Table Offset" $(slice 28 4 ${UINT} 0x%x)
	member 32 4 "Section Header Table Offset" $(slice 32 4 ${UINT} 0x%x)
	member 36 4 "Processor-Specific Flags"
	member 40 2 "ELF Header Size" $(slice 40 2 ${UINT16})
	member 42 2 "Program Header Size" $(slice 42 2 ${UINT16})
	member 44 2 "Program Header Count" $(slice 44 2 ${UINT16})
	member 46 2 "Section Header Size" $(slice 46 2 ${UINT16})
	member 48 2 "Section Header Count" $(slice 48 2 ${UINT16})
	member 58 2 "Section Name String Table Index" $(slice 58 2 ${UINT16})
}

elf64_interpret()
{
	member 0  4 "Magic"
	member 4  1 "Class" "$(class 4 1)"
	member 5  1 "Data" "$(data 5 1)"
	member 6  1 "Version"
	member 7  1 "OS / ABI" "$(osabi 7 1)"
	member 8  1 "ABI Version"
	member 9  7 "Padding"
	member 16 2 "Object Type" "$(object 16 2)"
	member 18 2 "Architecture" "$(machine 18 2)"
	member 20 4 "File Version"
	member 24 8 "Entry Point" $(slice 24 8 ${UINT} 0x%x)
	member 32 8 "Program Header Table Offset" $(slice 32 8 ${UINT} 0x%x)
	member 40 8 "Section Header Table Offset" $(slice 40 8 ${UINT} 0x%x)
	member 48 4 "Processor-Specific Flags"
	member 52 2 "ELF Header Size" $(slice 52 2 ${UINT16})
	member 54 2 "Program Header Size" $(slice 54 2 ${UINT16})
	member 56 2 "Program Header Count" $(slice 56 2 ${UINT16})
	member 58 2 "Section Header Size" $(slice 58 2 ${UINT16})
	member 60 2 "Section Header Count" $(slice 60 2 ${UINT16})
	member 62 2 "Section Name String Table Index" $(slice 62 2 ${UINT16})
}

member()
{
	local offset=$1 size=$2 label=$3 value=$4 palette=

	if [ -z "${value}" ]
	then
		printf "${label}\n"
	else
		printf "${label}: %s\n" "${value}"
	fi

	if [ -n "${PALETTE}" ]
	then
		palette="-p ${PALETTE}"
	fi

	dump -o ${offset} -s ${size} -t f ${palette} "${OBJECT}"
}

class()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} uint8)

	case "${value}" in
	(1) printf "32-bit" ;;
	(2) printf "64-bit" ;;
	(*) printf "Unknown" ;;
	esac
}

data()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} uint8)

	case "${value}" in
	(1) printf "Little Endian" ;;
	(2) printf "Big Endian" ;;
	(*) printf "Unknown" ;;
	esac
}

osabi()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} uint8)

	case "${value}" in
	  (0) printf "UNIX System V" ;;
	  (1) printf "HP-UX" ;;
	  (2) printf "NetBSD" ;;
	  (3) printf "Linux" ;;
	  (6) printf "Solaris" ;;
	  (7) printf "AIX" ;;
	  (8) printf "IRIX" ;;
	  (9) printf "FreeBSD" ;;
	 (10) printf "TRU64 UNIX" ;;
	 (11) printf "Modesto" ;;
	 (12) printf "OpenBSD" ;;
	 (13) printf "ARM EABI" ;;
	 (14) printf "ARM" ;;
	(255) printf "Standalone / Embedded" ;;
	  (*) printf "Unknown" ;;
	esac
}

object()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} ${UINT16})

	case "${value}" in
	(1) printf "Relocatable" ;;
	(2) printf "Executable" ;;
	(3) printf "Shared Object" ;;
	(4) printf "Core" ;;
	(*) printf "Unknown" ;;
	esac
}

machine()
{
	local offset=$1 size=$2
	local value=$(slice ${offset} ${size} ${UINT16})

	case "${value}" in
	  (1) printf "AT&T WE 32100" ;;
	  (2) printf "Sun SPARC" ;;
	  (3) printf "Intel 80386" ;;
	  (4) printf "Motorola m68k" ;;
	  (5) printf "Motorola m88k" ;;
	  (6) printf "Intel MCU" ;;
	  (7) printf "Intel 80860" ;;
	  (8) printf "MIPS R3000" ;;
	  (9) printf "IBM System/370" ;;
	 (10) printf "MIPS R3000" ;;
	 (15) printf "HP PA-RISC" ;;
	 (17) printf "Fujitsu VPP500" ;;
	 (18) printf "Sun SPARC v8+ 32-bit" ;;
	 (19) printf "Intel 80960" ;;
	 (20) printf "PowerPC 32-bit" ;;
	 (21) printf "PowerPC 64-bit" ;;
	 (22) printf "IBM System/390" ;;
	 (23) printf "IBM SPU/SPC" ;;
	 (36) printf "NEC V800" ;;
	 (37) printf "Fujitsu FR20" ;;
	 (38) printf "TRW RH-32" ;;
	 (39) printf "Motorola RCE" ;;
	 (40) printf "ARM" ;;
	 (41) printf "Digital Alpha" ;;
	 (42) printf "Hitachi SH" ;;
	 (43) printf "Sun SPARC v9 64-bit" ;;
	 (44) printf "Siemens Tricore" ;;
	 (45) printf "Argonaut RISC Core" ;;
	 (46) printf "Hitachi H8/300" ;;
	 (47) printf "Hitachi H8/300H" ;;
	 (48) printf "Hitachi H8S" ;;
	 (49) printf "Hitachi H8/500" ;;
	 (50) printf "Intel Itanium" ;;
	 (51) printf "Stanford MIPS-X" ;;
	 (52) printf "Motorola Coldfire" ;;
	 (53) printf "Motorola M68HC12" ;;
	 (54) printf "Fujitsu Multimedia Accelerator" ;;
	 (55) printf "Siemens PCP" ;;
	 (56) printf "Sony nCPU embedded RISC" ;;
	 (57) printf "Denso NDR1" ;;
	 (58) printf "Motorola Start*Core" ;;
	 (59) printf "Toyota ME16" ;;
	 (60) printf "STMicroelectronic ST100" ;;
	 (61) printf "Advanced Logic Corp. TinyJ" ;;
	 (62) printf "AMD x86-64" ;;
	 (63) printf "Sony DSP" ;;
	 (64) printf "Digital PDP-10" ;;
	 (65) printf "Digital PDP-11" ;;
	 (66) printf "Siemens FX66" ;;
	 (67) printf "STMicroelectronics ST9+" ;;
	 (68) printf "STMicroelectronics ST7" ;;
	 (69) printf "Motorola MC68HC16" ;;
	 (70) printf "Motorola MC68HC11" ;;
	 (71) printf "Motorola MC68HC08" ;;
	 (72) printf "Motorola MC68HC05" ;;
	 (73) printf "Silicon Graphics SVx" ;;
	 (74) printf "STMicroelectronics ST19" ;;
	 (75) printf "Digital VAX" ;;
	 (76) printf "Axis Communications 32-bit" ;;
	 (77) printf "Infineon Technologies 32-bit" ;;
	 (78) printf "Element14 64-bit DSP" ;;
	 (79) printf "LSI Logic 16-bit DSP" ;;
	 (80) printf "Donald Knuth's MMIX" ;;
	 (81) printf "Harvard University ANY" ;;
	 (82) printf "SiTera Prism" ;;
	 (83) printf "Atmel AVR" ;;
	 (84) printf "Fujitsu FR30" ;;
	 (85) printf "Mitsubishi D10V" ;;
	 (86) printf "Mitsubishi D30V" ;;
	 (87) printf "NEC v850" ;;
	 (88) printf "Mitsubishi M32R" ;;
	 (89) printf "Matsushita MN10300" ;;
	 (90) printf "Matsushita MN10200" ;;
	 (91) printf "picoJava" ;;
	 (92) printf "OpenRISC" ;;
	 (93) printf "ARCompact" ;;
	 (94) printf "Tensilica Xtensa" ;;
	 (95) printf "Alphamosaic VideoCore" ;;
	 (96) printf "Thompson Multimedia" ;;
	 (97) printf "NS32000" ;;
	 (98) printf "Tenor Network TPC" ;;
	 (99) printf "Trebia SNP 1000" ;;
	(100) printf "ST200" ;;
	(101) printf "Ubicom IP2xxx" ;;
	(102) printf "MAX" ;;
	(103) printf "CompactRISC" ;;
	(104) printf "Fujitsu F2MC16" ;;
	(105) printf "Texas Instruments MSP430" ;;
	(106) printf "Analog Devices Blackfin DSP" ;;
	(107) printf "Seiko Epson S1C33 family" ;;
	(108) printf "Sharp" ;;
	(109) printf "Arca RISC" ;;
	(110) printf "PKU-Unity" ;;
	(111) printf "eXcess" ;;
	(112) printf "Icera" ;;
	(113) printf "Altera Nios II" ;;
	(114) printf "CompactRISC CRX" ;;
	(115) printf "Motorola XGATE" ;;
	(116) printf "Infineon C16x/XC16x" ;;
	(117) printf "Renesas M16C" ;;
	(118) printf "dsPIC30F" ;;
	(119) printf "Freescale Communication Engine RISC" ;;
	(120) printf "Renesas M32C" ;;
	(131) printf "Altium TSK3000" ;;
	(132) printf "Freescale RS08" ;;
	(133) printf "Analog Devices SHARC" ;;
	(134) printf "Cyan Technology eCOG2" ;;
	(135) printf "Sunplus S+core7 RISC" ;;
	(136) printf "New Japan Radio 24-bit DSP" ;;
	(137) printf "Broadcom VideoCore III" ;;
	(138) printf "RISC for Lattice FPGA" ;;
	(139) printf "Seiko Epson C17" ;;
	(140) printf "TI TMS320C6000 DSP" ;;
	(141) printf "TI TMS320C2000 DSP" ;;
	(142) printf "TI TMS320C55x DSP" ;;
	(143) printf "TI Application Specific RISC" ;;
	(144) printf "TI Programmable Realtime Unit" ;;
	(160) printf "STMicroelectronics 64bit VLIW DSP" ;;
	(161) printf "Cypress M8C" ;;
	(162) printf "Renesas R32C" ;;
	(163) printf "NXP TriMedia" ;;
	(164) printf "QUALCOMM DSP6" ;;
	(165) printf "Intel 8051" ;;
	(166) printf "STMicroelectronics STxP7x" ;;
	(167) printf "Andes Tech RISC" ;;
	(168) printf "Cyan Technology eCOG1X" ;;
	(169) printf "Dallas MAXQ30" ;;
	(170) printf "New Japan Radio (NJR) 16-bit DSP" ;;
	(171) printf "M2000 Reconfigurable RISC" ;;
	(172) printf "Cray NV2 vector architecture" ;;
	(173) printf "Renesas RX" ;;
	(174) printf "Imagination Tech. META" ;;
	(175) printf "MCST Elbrus" ;;
	(176) printf "Cyan Technology eCOG16" ;;
	(177) printf "National Semi. CompactRISC CR16" ;;
	(178) printf "Freescale Extended Time Processing Unit" ;;
	(179) printf "Infineon Tech. SLE9X" ;;
	(180) printf "Intel L10M" ;;
	(181) printf "Intel K10M" ;;
	(183) printf "ARM 64-bit" ;;
	(185) printf "Atmel 32-bit" ;;
	(186) printf "STMicroelectronics STM8" ;;
	(187) printf "Tilera TILE64" ;;
	(188) printf "Tilera TILEPro" ;;
	(189) printf "Xilinx MicroBlaze" ;;
	(190) printf "NVIDIA CUDA" ;;
	(191) printf "Tilera TILE-Gx" ;;
	(192) printf "CloudShield" ;;
	(193) printf "KIPO-KAIST Core-A 1st gen." ;;
	(194) printf "KIPO-KAIST Core-A 2nd gen." ;;
	(195) printf "Synopsys ARCompact V2" ;;
	(196) printf "Open8 RISC" ;;
	(197) printf "Renesas RL78" ;;
	(198) printf "Broadcom VideoCore V" ;;
	(199) printf "Renesas 78KOR" ;;
	(200) printf "Freescale 56800EX DSC" ;;
	(201) printf "Beyond BA1" ;;
	(202) printf "Beyond BA2" ;;
	(203) printf "XMOS xCORE" ;;
	(204) printf "Microchip 8-bit PIC" ;;
	(210) printf "KM211 KM32" ;;
	(211) printf "KM211 KMX32" ;;
	(212) printf "KM211 KMX16" ;;
	(213) printf "KM211 KMX8" ;;
	(214) printf "KM211 KVARC" ;;
	(215) printf "Paneve CDP" ;;
	(216) printf "Cognitive Smart Memory Processor" ;;
	(217) printf "Bluechip CoolEngine" ;;
	(218) printf "Nanoradio Optimized RISC" ;;
	(219) printf "CSR Kalimba" ;;
	(220) printf "Zilog Z80" ;;
	(221) printf "VISIUMcore" ;;
	(222) printf "FT32" ;;
	(223) printf "Moxie" ;;
	(224) printf "AMD GPU" ;;
	(243) printf "RISC-V" ;;
	(247) printf "Linux BPF" ;;
	(252) printf "C-SKY" ;;
	  (*) printf "Unknown" ;;
	esac
}

slice()
{
	local offset=$1 size=$2 type=$3 format=${4:-%d}

	dump -o ${offset} -s ${size} "${OBJECT}" | \
	sift -f "${format}" -t ${type}
}

main "$@"
